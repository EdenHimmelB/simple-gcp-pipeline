version: '1'
x-airflow-common:
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.

  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.2}
  &airflow-common
  build:
    dockerfile: Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW_UID: ${AIRFLOW_UID}
    AIRFLOW_GID: ${AIRFLOW_GID}
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    GOOGLE_APPLICATION_CREDENTIALS: /run/secrets/google_service_account
    AIRFLOW_CONN_SPARK_DEFAULT: spark://spark-master.com:7077
    AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT: 'google-cloud-platform://?extra__google_cloud_platform__key_path=${GOOGLE_APPLICATION_CREDENTIALS}'

    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

    # Custom environment variables for airflow dags
    GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT}
    BIGQUERY_DATASET: ${BIGQUERY_DATASET}
    BIGQUERY_TABLE: ${BIGQUERY_TABLE}
    GOOGLE_STORAGE_BUCKET: ${GOOGLE_STORAGE_BUCKET}
    TARGET_URL: ${TARGET_URL}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/spark-jobs:/opt/airflow/spark-jobs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/logs:/opt/airflow/logs
    - ./data:/opt/data
  user: root
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy
  networks:
    - airflow_spark_network
  secrets:
    - google_service_account

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow_spark_network

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/opt
    networks:
      - airflow_spark_network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow_spark_network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow_spark_network

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      - airflow_spark_network

  # Apache Spark Setup
  # Spark Services
  spark-master:
    image: spark:3.5.1-python3
    working_dir: /opt/spark
    command: /bin/bash -c "bin/spark-class org.apache.spark.deploy.master.Master -h spark-master.com"
    hostname: spark-master.com
    environment:
      SPARK_LOCAL_IP: spark-master.com
    ports:
      - "7077:7077" # Spark Master
      - "9090:8080" # Spark Master UI
    networks:
      - airflow_spark_network
    volumes:
      - ./data:/opt/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '2g'
        reservations:
          memory: '1g'

  # Spark Worker 1
  spark-worker-1:
    image: spark:3.5.1-python3
    working_dir: /opt/spark
    command: /bin/bash -c "bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master.com:7077"
    environment:
      SPARK_WORKER_CORES: 2 # Set number of cores for this worker
      SPARK_LOCAL_IP: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081" # Spark Worker 1 UI
    networks:
      - airflow_spark_network
    volumes:
      - ./data:/opt/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '3g'
        reservations:
          memory: '1.5g'

  # Spark Worker 2
  spark-worker-2:
    image: spark:3.5.1-python3
    working_dir: /opt/spark
    command: /bin/bash -c "bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master.com:7077"
    environment:
      SPARK_WORKER_CORES: 2
      SPARK_LOCAL_IP: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081" # Spark Worker 2 UI
    networks:
      - airflow_spark_network
    volumes:
      - ./data:/opt/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '3g'
        reservations:
          memory: '1.5g'

  # Spark Worker 3
  spark-worker-3:
    image: spark:3.5.1-python3
    working_dir: /opt/spark
    command: /bin/bash -c "bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master.com:7077"
    environment:
      SPARK_WORKER_CORES: 2
      SPARK_LOCAL_IP: spark-worker-3
    depends_on:
      - spark-master
    ports:
      - "8083:8081" # Spark Worker 3 UI
    networks:
      - airflow_spark_network
    volumes:
      - ./data:/opt/data
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '3g'
        reservations:
          memory: '1.5g'

volumes:
  postgres-db-volume:
  airflow-volume:


networks:
  airflow_spark_network:
    driver: bridge

secrets:
  google_service_account:
    file: "./keys/google_application_credentials.json"
